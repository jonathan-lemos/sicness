{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/SicCompiler/SicBase.js","dist/SicCompiler/SicBytecode.js","dist/SicCompiler/SicCompiler.js","dist/SicCompiler/SicCsect.js","dist/SicCompiler/SicFmt.js","dist/SicCompiler/SicFormat1.js","dist/SicCompiler/SicFormat2.js","dist/SicCompiler/SicFormat3.js","dist/SicCompiler/SicFormat4.js","dist/SicCompiler/SicFormatLegacy.js","dist/SicCompiler/SicLitTab.js","dist/SicCompiler/SicLiteral.js","dist/SicCompiler/SicLstEntry.js","dist/SicCompiler/SicOperandAddr.js","dist/SicCompiler/SicPending.js","dist/SicCompiler/SicRegConvert.js","dist/SicCompiler/SicSpace.js","dist/SicCompiler/SicSplit.js","dist/SicCompiler/SicUnsigned.js","dist/SicCompiler/SicUseTab.js","dist/app.js"],"names":["f","exports","module","define","amd","window","global","self","this","sicness","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","Object","defineProperty","value","SicPending_1","SicBase","val","SicPending","prototype","ready","makeReady","tagTab","pending","convert","SicBytecode","mnemonic","opcode","format","mnemonicPvt","opcodePvt","formatPvt","get","enumerable","configurable","bytecodeTable","addBytecode","bc","writable","SicCsect_1","SicFormat1_1","SicFormat2_1","SicFormat3_1","SicFormat4_1","SicFormatLegacy_1","SicLstEntry_1","SicSpace_1","SicSplit_1","SicCompiler","lines","_this","ctab","SicCsectTab","errflag","forEach","replace","trim","split","SicSplit","instr","args","current","useTab","aloc","toString","_i","_a","keys","equTab","key","match","s","undefined","tag","isDirective","op","directives","SicFormat1","isFormat1","SicFormat2","isFormat2","SicFormat3","isFormat3","SicFormat4","isFormat4","SicFormatLegacy","isFormatLegacy","SicSpace","isSpace","addLst","SicLstEntry","rloc","inst","inc","message","litTab","hasPending","lst","l","bcData","res","extRefTab","modRecs","push","loc","len","symbol","str","errmsg","makeLst","makeObj","default","SicBase_1","SicFmt_1","SicLiteral_1","SicLitTab_1","SicUseTab_1","SicCsect","startAddr","SicLitTab","SicUseTab","extDefTab","Set","setStartAddr","currentSect","csects","parseNum","reDec","RegExp","reHex","reChar","parseInt","x","ptr","slice","charCodeAt","RESW","source","RESB","START","startData","name","END","csect","BASE","base","NOBASE","LTORG","createOrg","v","asHex","SicLiteral","EQU","USE","use","CSECT","EXTDEF","add","EXTREF","has","concat","map","ls","astr","rstr","inststr","hasInstruction","byteString","istr","msg","padEnd","mkH","asWord","mkD","defs","size","mkR","refs","mkT","arr","buf","asByte","bytesToString","toBytes","mkE","mkM","modrec","m","getLen","start","end","a_1","b","sloc","sname","forEachAux","filter","newSect","callback","curBuf","toUpperCase","padStart","reduce","acc","SicBytecode_1","line","SicRegConvert_1","SicUnsigned_1","matcher","reRegister","sicRegToDec","op1","sicCheckUnsigned","op2","bytes","SicOperandAddr_1","SicOperandAddr","SicOpType","f3","nixbpe","f4","charAt","legacy","ltorgs","getLitLoc","pc","diffMin","Number","MAX_SAFE_INTEGER","lt","Math","min","splitWord","byteCode","SicOpAddrType","arg","type","reDecimal","reTag","isLiteral","pcrel","addr","direct","indexed","rdy","char","immediate","indirect","getType","q","opLen","sicMakeUnsigned","isTag","reg","sicDecToReg","func","splitByte","test","lineArr","sicMakeMask","nBits","startloc","ALOC","RLOC","currentUse","label","__importDefault","mod","__esModule","SicCompiler_1","editor","ace","edit","setTheme","session","setMode","$","click","getValue","comp","output","err","alert"],"mappings":"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AAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,EAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,EAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,EAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,KAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,KAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,SAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,SAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,GAAA,IACAW,EAAA,IAAAX,EAAA,OAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,MAAA,IAAA,IACAW,EAAA,IAAAX,EAAA,K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","file":"sicness.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicPending_1 = require(\"./SicPending\");\nvar SicBase = (function () {\n    function SicBase(val) {\n        this.val = val;\n        if (this.val instanceof SicPending_1.SicPending && typeof this.val.val === \"number\") {\n            this.val = this.val.val;\n        }\n    }\n    SicBase.prototype.ready = function () {\n        return typeof this.val === \"number\";\n    };\n    SicBase.prototype.makeReady = function (p) {\n        if (typeof this.val === \"number\") {\n            return;\n        }\n        if (typeof p === \"number\") {\n            this.val = p;\n            return;\n        }\n        var tagTab = p;\n        var pending = this.val;\n        this.val = pending.convert(tagTab, null, null);\n    };\n    return SicBase;\n}());\nexports.SicBase = SicBase;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode = (function () {\n    function SicBytecode(mnemonic, opcode, format) {\n        this.mnemonicPvt = mnemonic;\n        this.opcodePvt = opcode;\n        this.formatPvt = format;\n    }\n    Object.defineProperty(SicBytecode.prototype, \"mnemonic\", {\n        get: function () {\n            return this.mnemonicPvt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SicBytecode.prototype, \"opcode\", {\n        get: function () {\n            return this.opcodePvt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SicBytecode.prototype, \"format\", {\n        get: function () {\n            return this.formatPvt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SicBytecode;\n}());\nexports.SicBytecode = SicBytecode;\nexports.bytecodeTable = {};\nvar addBytecode = function (bc) {\n    Object.defineProperty(exports.bytecodeTable, bc.mnemonic, {\n        configurable: true,\n        enumerable: true,\n        value: bc,\n        writable: false,\n    });\n};\naddBytecode(new SicBytecode(\"ADD\", 0x18, 3));\naddBytecode(new SicBytecode(\"ADDF\", 0x58, 3));\naddBytecode(new SicBytecode(\"ADDR\", 0x90, 2));\naddBytecode(new SicBytecode(\"AND\", 0x40, 3));\naddBytecode(new SicBytecode(\"CLEAR\", 0xB4, 2));\naddBytecode(new SicBytecode(\"COMP\", 0x28, 3));\naddBytecode(new SicBytecode(\"COMPF\", 0x88, 3));\naddBytecode(new SicBytecode(\"COMPR\", 0xA0, 2));\naddBytecode(new SicBytecode(\"DIV\", 0x24, 3));\naddBytecode(new SicBytecode(\"DIVF\", 0x64, 3));\naddBytecode(new SicBytecode(\"DIVR\", 0x9C, 2));\naddBytecode(new SicBytecode(\"FIX\", 0xC4, 1));\naddBytecode(new SicBytecode(\"FLOAT\", 0xC0, 1));\naddBytecode(new SicBytecode(\"HIO\", 0xF4, 1));\naddBytecode(new SicBytecode(\"J\", 0x3C, 3));\naddBytecode(new SicBytecode(\"JEQ\", 0x30, 3));\naddBytecode(new SicBytecode(\"JGT\", 0x34, 3));\naddBytecode(new SicBytecode(\"JLT\", 0x38, 3));\naddBytecode(new SicBytecode(\"JSUB\", 0x48, 3));\naddBytecode(new SicBytecode(\"LDA\", 0x00, 3));\naddBytecode(new SicBytecode(\"LDB\", 0x68, 3));\naddBytecode(new SicBytecode(\"LDCH\", 0x50, 3));\naddBytecode(new SicBytecode(\"LDF\", 0x70, 3));\naddBytecode(new SicBytecode(\"LDL\", 0x08, 3));\naddBytecode(new SicBytecode(\"LDS\", 0x6C, 3));\naddBytecode(new SicBytecode(\"LDT\", 0x74, 3));\naddBytecode(new SicBytecode(\"LDX\", 0x04, 3));\naddBytecode(new SicBytecode(\"LPS\", 0xD0, 3));\naddBytecode(new SicBytecode(\"MUL\", 0x20, 3));\naddBytecode(new SicBytecode(\"MULF\", 0x60, 3));\naddBytecode(new SicBytecode(\"MULR\", 0x98, 2));\naddBytecode(new SicBytecode(\"NORM\", 0xC8, 1));\naddBytecode(new SicBytecode(\"OR\", 0x44, 3));\naddBytecode(new SicBytecode(\"RD\", 0xD8, 3));\naddBytecode(new SicBytecode(\"RMO\", 0xAC, 2));\naddBytecode(new SicBytecode(\"RSUB\", 0x4C, 3));\naddBytecode(new SicBytecode(\"SHIFTL\", 0xA4, 2));\naddBytecode(new SicBytecode(\"SHIFTR\", 0xA8, 2));\naddBytecode(new SicBytecode(\"SIO\", 0xF0, 1));\naddBytecode(new SicBytecode(\"SSK\", 0xEC, 3));\naddBytecode(new SicBytecode(\"STA\", 0x0C, 3));\naddBytecode(new SicBytecode(\"STB\", 0x78, 3));\naddBytecode(new SicBytecode(\"STCH\", 0x54, 3));\naddBytecode(new SicBytecode(\"STF\", 0x80, 3));\naddBytecode(new SicBytecode(\"STI\", 0xD4, 3));\naddBytecode(new SicBytecode(\"STL\", 0x14, 3));\naddBytecode(new SicBytecode(\"STS\", 0x7C, 3));\naddBytecode(new SicBytecode(\"STSW\", 0xE8, 3));\naddBytecode(new SicBytecode(\"STT\", 0x84, 3));\naddBytecode(new SicBytecode(\"STX\", 0x10, 3));\naddBytecode(new SicBytecode(\"SUB\", 0x1C, 3));\naddBytecode(new SicBytecode(\"SUBF\", 0x5C, 3));\naddBytecode(new SicBytecode(\"SUBR\", 0x94, 2));\naddBytecode(new SicBytecode(\"SVC\", 0xB0, 2));\naddBytecode(new SicBytecode(\"TD\", 0xE0, 3));\naddBytecode(new SicBytecode(\"TIO\", 0xF8, 1));\naddBytecode(new SicBytecode(\"TIX\", 0x2C, 3));\naddBytecode(new SicBytecode(\"TIXR\", 0xB8, 2));\naddBytecode(new SicBytecode(\"WD\", 0xDC, 3));","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicCsect_1 = require(\"./SicCsect\");\nvar SicFormat1_1 = require(\"./SicFormat1\");\nvar SicFormat2_1 = require(\"./SicFormat2\");\nvar SicFormat3_1 = require(\"./SicFormat3\");\nvar SicFormat4_1 = require(\"./SicFormat4\");\nvar SicFormatLegacy_1 = require(\"./SicFormatLegacy\");\nvar SicLstEntry_1 = require(\"./SicLstEntry\");\nvar SicSpace_1 = require(\"./SicSpace\");\nvar SicSplit_1 = require(\"./SicSplit\");\nvar SicCompiler = (function () {\n    function SicCompiler(lines) {\n        var _this = this;\n        this.ctab = new SicCsect_1.SicCsectTab();\n        this.errflag = false;\n        lines.forEach(function (val) {\n            try {\n                if (val.replace(/\\..*$/, \"\").trim() === \"\") {\n                    return;\n                }\n                var split = new SicSplit_1.SicSplit(val);\n                var instr = void 0;\n                split.args.replace(/(#|@|=)\\*$/, \"$1\" + _this.ctab.current.useTab.aloc.toString(10));\n                for (var _i = 0, _a = Object.keys(_this.ctab.current.equTab); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    if (split.args.match(key) === null) {\n                        continue;\n                    }\n                    for (var s = _this.ctab.current.equTab[key]; s !== undefined; s = _this.ctab.current.equTab[s]) {\n                        split.args = split.args.replace(key, _this.ctab.current.equTab[key]);\n                    }\n                    break;\n                }\n                if (split.tag !== \"\") {\n                    if (_this.ctab.current.tagTab[split.tag] !== undefined) {\n                        throw new Error(\"Duplicate label \" + split.tag);\n                    }\n                    _this.ctab.current.tagTab[split.tag] = _this.ctab.current.useTab.aloc;\n                }\n                if (_this.ctab.isDirective(split.op)) {\n                    _this.ctab.directives[split.op](val, split);\n                    return;\n                }\n                if (SicFormat1_1.SicFormat1.isFormat1(split.op)) {\n                    instr = new SicFormat1_1.SicFormat1(split);\n                }\n                else if (SicFormat2_1.SicFormat2.isFormat2(split.op)) {\n                    instr = new SicFormat2_1.SicFormat2(split);\n                }\n                else if (SicFormat3_1.SicFormat3.isFormat3(split.op)) {\n                    instr = new SicFormat3_1.SicFormat3(split, _this.ctab.current);\n                }\n                else if (SicFormat4_1.SicFormat4.isFormat4(split.op)) {\n                    instr = new SicFormat4_1.SicFormat4(split, _this.ctab.current);\n                }\n                else if (SicFormatLegacy_1.SicFormatLegacy.isFormatLegacy(split.op)) {\n                    instr = new SicFormatLegacy_1.SicFormatLegacy(split, _this.ctab.current);\n                }\n                else if (SicSpace_1.SicSpace.isSpace(split.op)) {\n                    instr = new SicSpace_1.SicSpace(split);\n                }\n                else {\n                    throw new Error(split.op + \" is not a valid mnemonic.\");\n                }\n                _this.ctab.addLst(new SicLstEntry_1.SicLstEntry(val, { aloc: _this.ctab.current.useTab.aloc, rloc: _this.ctab.current.useTab.rloc, inst: instr }));\n                _this.ctab.current.useTab.inc(instr.length());\n            }\n            catch (e) {\n                _this.errflag = true;\n                _this.ctab.addLst(new SicLstEntry_1.SicLstEntry(val, e.message));\n            }\n        });\n        this.ctab.forEach(function (p) {\n            if (p.litTab.hasPending()) {\n                _this.ctab.directives[\"LTORG\"](\"AUTO-LTORG\", new SicSplit_1.SicSplit(\"\\tAUTO-LTORG\"));\n            }\n        });\n        this.ctab.forEach(function (p) {\n            p.lst.forEach(function (l) {\n                if (l.bcData !== undefined && l.bcData.inst !== undefined && !l.bcData.inst.ready()) {\n                    try {\n                        var res = l.bcData.inst.makeReady(l.bcData.aloc, p.tagTab, p.litTab, p.extRefTab);\n                        if (res !== null) {\n                            p.modRecs.push({ loc: l.bcData.aloc, len: 5, symbol: res });\n                        }\n                    }\n                    catch (e) {\n                        var str = e.message;\n                        l.bcData = undefined;\n                        l.errmsg = str;\n                    }\n                }\n            });\n        });\n    }\n    SicCompiler.prototype.makeLst = function () {\n        return this.ctab.makeLst();\n    };\n    SicCompiler.prototype.makeObj = function () {\n        return this.ctab.makeObj();\n    };\n    Object.defineProperty(SicCompiler.prototype, \"err\", {\n        get: function () {\n            return this.errflag;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SicCompiler;\n}());\nexports.default = SicCompiler;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBase_1 = require(\"./SicBase\");\nvar SicFmt_1 = require(\"./SicFmt\");\nvar SicLiteral_1 = require(\"./SicLiteral\");\nvar SicLitTab_1 = require(\"./SicLitTab\");\nvar SicLstEntry_1 = require(\"./SicLstEntry\");\nvar SicPending_1 = require(\"./SicPending\");\nvar SicUseTab_1 = require(\"./SicUseTab\");\nvar SicCsect = (function () {\n    function SicCsect(startAddr) {\n        this.lst = [];\n        this.litTab = new SicLitTab_1.SicLitTab();\n        this.tagTab = {};\n        this.equTab = {};\n        this.useTab = new SicUseTab_1.SicUseTab(startAddr);\n        this.extDefTab = new Set();\n        this.extRefTab = new Set();\n        this.modRecs = [];\n    }\n    SicCsect.prototype.setStartAddr = function (startAddr) {\n        this.useTab = new SicUseTab_1.SicUseTab(startAddr);\n    };\n    return SicCsect;\n}());\nexports.SicCsect = SicCsect;\nvar SicCsectTab = (function () {\n    function SicCsectTab() {\n        var _this = this;\n        this.currentSect = \"\";\n        this.csects = {};\n        this.csects[this.currentSect] = new SicCsect(0);\n        this.lst = [];\n        var parseNum = function (val) {\n            var reDec = new RegExp(\"^(\\\\d+)$\");\n            var reHex = new RegExp(\"^X'([0-9A-Fa-f]+)'$\");\n            var reChar = new RegExp(\"^C'.{1,3}'$\");\n            var match;\n            if ((match = val.match(reDec)) !== null) {\n                return parseInt(match[1], 10);\n            }\n            if ((match = val.match(reHex)) !== null) {\n                return parseInt(match[1], 16);\n            }\n            if ((match = val.match(reChar)) !== null) {\n                var x = 0;\n                for (var ptr = 0, s = match[1]; s !== \"\"; ptr += 8, s = s.slice(0, -1)) {\n                    x += s.charCodeAt(s.length - 1) << ptr;\n                }\n                return x;\n            }\n            throw new Error(val + \" was not of a valid numeric format.\");\n        };\n        this.directives = {\n            RESW: function (source, split) {\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source, { aloc: _this.current.useTab.aloc, rloc: _this.current.useTab.rloc, inst: undefined }));\n                _this.current.useTab.inc(3 * parseNum(split.args));\n            },\n            RESB: function (source, split) {\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source, { aloc: _this.current.useTab.aloc, rloc: _this.current.useTab.rloc, inst: undefined }));\n                _this.current.useTab.inc(parseNum(split.args));\n            },\n            START: function (source, split) {\n                if (_this.currentSect !== \"\" || _this.current.lst.length !== 0) {\n                    throw new Error(\"START can only be used as the first line of a program.\");\n                }\n                _this.current.setStartAddr(parseInt(split.args, 16));\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source, { aloc: _this.current.useTab.aloc, rloc: _this.current.useTab.rloc, inst: undefined }));\n                _this.startData = { name: split.tag, loc: _this.current.useTab.aloc };\n            },\n            END: function (source, split) {\n                _this.csect(\"\");\n                if ((_this.startData === undefined && split.args !== \"\") ||\n                    (_this.startData !== undefined && split.args !== _this.startData.name)) {\n                    throw new Error(\"END label must be the same as the start label.\");\n                }\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source, { aloc: _this.current.useTab.aloc, rloc: _this.current.useTab.rloc, inst: undefined }));\n            },\n            BASE: function (source, split) {\n                try {\n                    _this.current.base = new SicBase_1.SicBase(parseNum(split.args));\n                }\n                catch (e) {\n                    _this.current.base = new SicBase_1.SicBase(new SicPending_1.SicPending(split.args));\n                }\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n            },\n            NOBASE: function (source, split) {\n                _this.current.base = undefined;\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n            },\n            LTORG: function (source, split) {\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n                var l = _this.current.litTab.createOrg(_this.current.useTab.aloc);\n                l.forEach(function (v) {\n                    _this.addLst(new SicLstEntry_1.SicLstEntry(\"LTORG-WORD X'\" + SicFmt_1.asHex(v.val) + \"'\", { aloc: _this.current.useTab.aloc, rloc: _this.current.useTab.rloc, inst: new SicLiteral_1.SicLiteral(v.val) }));\n                    _this.current.useTab.inc(3);\n                });\n            },\n            EQU: function (source, split) {\n                if (split.tag === \"\") {\n                    throw new Error(\"EQU needs a non-empty label.\");\n                }\n                if (_this.current.equTab[split.args] !== undefined) {\n                    throw new Error(\"EQU \" + split.args + \" was already defined.\");\n                }\n                _this.current.equTab[split.tag] = split.args;\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n            },\n            USE: function (source, split) {\n                _this.current.useTab.use(split.args);\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n            },\n            CSECT: function (source, split) {\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n                _this.csect(split.tag);\n            },\n            EXTDEF: function (source, split) {\n                var s = split.args.split(\",\");\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n                s.forEach(function (r) { return _this.current.extDefTab.add(r); });\n            },\n            EXTREF: function (source, split) {\n                var s = split.args.split(\",\");\n                _this.addLst(new SicLstEntry_1.SicLstEntry(source));\n                s.forEach(function (r) {\n                    if (_this.current.extRefTab.has(r)) {\n                        throw new Error(\"Duplicate EXTREF \" + r);\n                    }\n                    if (_this.current.tagTab[r] !== undefined) {\n                        throw new Error(\"Duplicate label \" + r);\n                    }\n                    _this.current.extRefTab.add(r);\n                });\n            },\n        };\n    }\n    SicCsectTab.prototype.isDirective = function (mnemonic) {\n        return this.directives[mnemonic] !== undefined;\n    };\n    SicCsectTab.prototype.addLst = function (l) {\n        this.lst.push(l);\n        this.current.lst.push(l);\n    };\n    SicCsectTab.prototype.makeLst = function () {\n        var s = [\"n\"];\n        s[0] = \"n    \\taloc \\trloc \\tbytecode\\tsource\";\n        s[1] = \"-----\\t-----\\t-----\\t--------\\t------\";\n        var i = 1;\n        return s.concat(this.lst.map(function (ls) {\n            var astr = ls.bcData === undefined ? \"\" : SicFmt_1.asHex(ls.bcData.aloc);\n            var rstr = ls.bcData === undefined ? \"\" : SicFmt_1.asHex(ls.bcData.rloc);\n            var inststr = ls.hasInstruction() ? ls.byteString() : \"\";\n            var istr = i.toString(10);\n            ++i;\n            var msg = istr.padEnd(5, \" \") + \"\\t\" +\n                astr.padEnd(5, \" \") + \"\\t\" +\n                rstr.padEnd(5, \" \") + \"\\t\" +\n                inststr.padEnd(8, \" \") + \"\\t\" +\n                ls.source;\n            if (ls.errmsg !== undefined) {\n                msg += \"\\n* Error: \" + ls.errmsg + \" *\";\n            }\n            return msg;\n        }));\n    };\n    SicCsectTab.prototype.makeObj = function () {\n        var s = [];\n        var mkH = function (len, loc, name) {\n            if (loc === undefined) {\n                loc = 0;\n            }\n            if (name === undefined) {\n                name = \"\";\n            }\n            return \"H \" + name + \" \" + SicFmt_1.asWord(loc) + \" \" + SicFmt_1.asWord(len);\n        };\n        var mkD = function (defs, tagTab) {\n            if (defs.size === 0) {\n                return \"\";\n            }\n            var a = \"D \";\n            defs.forEach(function (v) { return a += v + \" \" + SicFmt_1.asWord(tagTab[v]); }, \"\");\n            return a;\n        };\n        var mkR = function (refs) {\n            if (refs.size === 0) {\n                return \"\";\n            }\n            var a = \"R \";\n            refs.forEach(function (v) { return a += v + \" \"; }, \"\");\n            return a.trim();\n        };\n        var mkT = function (arr) {\n            var buf = [];\n            arr.forEach(function (l) {\n                if (l.bcData === undefined || l.bcData.inst === undefined) {\n                    return;\n                }\n                buf.push(\"T \" + SicFmt_1.asWord(l.bcData.aloc) + \" \" + SicFmt_1.asByte(l.bcData.inst.length()) + \" \" + SicFmt_1.bytesToString(l.bcData.inst.toBytes()));\n            });\n            return buf;\n        };\n        var mkE = function (loc) {\n            if (loc === undefined) {\n                return \"E\";\n            }\n            return \"E \" + SicFmt_1.asWord(loc);\n        };\n        var mkM = function (modrec) {\n            return modrec.map(function (m) {\n                return \"M \" + SicFmt_1.asWord(m.loc) + \" \" + SicFmt_1.asByte(m.len) + \" +\" + m.symbol;\n            });\n        };\n        var getLen = function (a) {\n            var start = 0;\n            var end = 0;\n            for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n                var b = a_1[_i];\n                if (b.bcData !== undefined) {\n                    start = b.bcData.aloc;\n                    break;\n                }\n            }\n            for (var i = a.length - 1; i >= 0; --i) {\n                var bc = a[i].bcData;\n                if (bc !== undefined) {\n                    end = bc.aloc + (bc.inst !== undefined ? bc.inst.length() : 0);\n                    break;\n                }\n            }\n            return end - start;\n        };\n        var sloc = this.startData !== undefined ? this.startData.loc : 0;\n        var sname = this.startData !== undefined ? this.startData.name : \"\";\n        s.push(mkH(getLen(this.csects[\"\"].lst), sloc, sname));\n        s.push(mkD(this.csects[\"\"].extDefTab, this.csects[\"\"].tagTab));\n        s.push(mkR(this.csects[\"\"].extRefTab));\n        s = s.concat(mkT(this.csects[\"\"].lst));\n        s = s.concat(mkM(this.csects[\"\"].modRecs));\n        s.push(mkE(sloc));\n        this.forEachAux(function (c, n) {\n            s.push(mkH(getLen(c.lst), 0, n));\n            s.push(mkD(c.extDefTab, c.tagTab));\n            s.push(mkR(c.extRefTab));\n            s = s.concat(mkT(c.lst));\n            s = s.concat(mkM(c.modRecs));\n            s.push(mkE());\n        });\n        return s.filter(function (r) { return r !== \"\"; });\n    };\n    Object.defineProperty(SicCsectTab.prototype, \"current\", {\n        get: function () {\n            return this.csects[this.currentSect];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SicCsectTab.prototype.csect = function (newSect) {\n        this.currentSect = newSect;\n        if (this.csects[this.currentSect] === undefined) {\n            this.csects[this.currentSect] = new SicCsect(0);\n        }\n    };\n    Object.defineProperty(SicCsectTab.prototype, \"default\", {\n        get: function () {\n            return this.csects[\"\"];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SicCsectTab.prototype.forEach = function (callback) {\n        var _this = this;\n        var curBuf = this.currentSect;\n        Object.keys(this.csects).forEach(function (c) {\n            _this.currentSect = c;\n            callback(_this.csects[c], c);\n        });\n        this.currentSect = curBuf;\n    };\n    SicCsectTab.prototype.forEachAux = function (callback) {\n        var _this = this;\n        var curBuf = this.currentSect;\n        Object.keys(this.csects).forEach(function (c) {\n            if (c === \"\") {\n                return;\n            }\n            _this.currentSect = c;\n            callback(_this.csects[c], c);\n        });\n        this.currentSect = curBuf;\n    };\n    return SicCsectTab;\n}());\nexports.SicCsectTab = SicCsectTab;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.asHex = function (n) { return n.toString(16).toUpperCase(); };\nexports.asWord = function (n) { return exports.asHex(n).padStart(6, \"0\"); };\nexports.asByte = function (n) { return exports.asHex(n).padStart(2, \"0\"); };\nexports.bytesToString = function (n) { return n.reduce(function (acc, val) { return acc + exports.asByte(val); }, \"\"); };","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode_1 = require(\"./SicBytecode\");\nvar SicFormat1 = (function () {\n    function SicFormat1(line) {\n        if (!SicFormat1.isFormat1(line.op)) {\n            throw new Error(line.op + \" is not a format 1 operation\");\n        }\n        if (line.args !== \"\") {\n            throw new Error(\"Format 1 arguments cannot have arguments\");\n        }\n        this.bc = SicBytecode_1.bytecodeTable[line.op];\n    }\n    SicFormat1.isFormat1 = function (mnemonic) {\n        var bc = SicBytecode_1.bytecodeTable[mnemonic];\n        return bc !== undefined && bc.format === 1;\n    };\n    SicFormat1.prototype.ready = function () {\n        return true;\n    };\n    SicFormat1.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return null;\n    };\n    SicFormat1.prototype.length = function () {\n        return 1;\n    };\n    SicFormat1.prototype.toBytes = function () {\n        return [this.bc.opcode];\n    };\n    return SicFormat1;\n}());\nexports.SicFormat1 = SicFormat1;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode_1 = require(\"./SicBytecode\");\nvar SicRegConvert_1 = require(\"./SicRegConvert\");\nvar SicUnsigned_1 = require(\"./SicUnsigned\");\nvar SicFormat2 = (function () {\n    function SicFormat2(line) {\n        if (!SicFormat2.isFormat2(line.op)) {\n            throw new Error(line.op + \" is not a format 2 opcode\");\n        }\n        this.bc = SicBytecode_1.bytecodeTable[line.op];\n        var s = line.args.trim().split(/\\s*,\\s*/);\n        if (s.length === 1) {\n            s.push(\"0\");\n        }\n        if (s.length !== 2) {\n            throw new Error(\"This format 2 instruction has an invalid number of operands.\");\n        }\n        var matcher = function (str) {\n            var reRegister = new RegExp(\"^(A|X|L|PC|SW|B|S|T|F)$\");\n            var reHex = new RegExp(\"^X'([0-9A-Fa-f]+)'$\");\n            var reDec = new RegExp(\"^([0-9]+)$\");\n            var match;\n            if ((match = str.match(reRegister)) !== null) {\n                return SicRegConvert_1.sicRegToDec(match[1]);\n            }\n            else if ((match = str.match(reHex)) !== null) {\n                return parseInt(match[1], 16);\n            }\n            else if ((match = str.match(reDec)) !== null) {\n                return parseInt(match[1], 10);\n            }\n            throw new Error(str + \" is not a valid format 2 operand.\");\n        };\n        this.op1 = matcher(s[0]);\n        SicUnsigned_1.sicCheckUnsigned(this.op1, 4);\n        this.op2 = matcher(s[1]);\n        SicUnsigned_1.sicCheckUnsigned(this.op2, 4);\n    }\n    SicFormat2.isFormat2 = function (mnemonic) {\n        var bc = SicBytecode_1.bytecodeTable[mnemonic];\n        return bc !== undefined && bc.format === 2;\n    };\n    SicFormat2.prototype.ready = function () {\n        return true;\n    };\n    SicFormat2.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return null;\n    };\n    SicFormat2.prototype.length = function () {\n        return 2;\n    };\n    SicFormat2.prototype.toBytes = function () {\n        var bytes = [0x00, 0x00];\n        bytes[0] = this.bc.opcode;\n        bytes[1] |= (this.op1 & 0x0F) << 4;\n        bytes[1] |= (this.op2 & 0x0F);\n        return bytes;\n    };\n    return SicFormat2;\n}());\nexports.SicFormat2 = SicFormat2;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode_1 = require(\"./SicBytecode\");\nvar SicOperandAddr_1 = require(\"./SicOperandAddr\");\nvar SicFormat3 = (function () {\n    function SicFormat3(line, csect) {\n        if (!SicFormat3.isFormat3(line.op)) {\n            throw new Error(line.op + \" is not format 3\");\n        }\n        this.bc = SicBytecode_1.bytecodeTable[line.op];\n        this.op = new SicOperandAddr_1.SicOperandAddr(line.args, SicOperandAddr_1.SicOpType.f3, csect);\n    }\n    SicFormat3.isFormat3 = function (mnemonic) {\n        var bc = SicBytecode_1.bytecodeTable[mnemonic];\n        return bc !== undefined && bc.format === 3;\n    };\n    SicFormat3.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return this.op.makeReady(loc + this.length(), tagTab, litTab, extRefTab);\n    };\n    SicFormat3.prototype.ready = function () {\n        return this.op.ready();\n    };\n    SicFormat3.prototype.length = function () {\n        return 3;\n    };\n    SicFormat3.prototype.toBytes = function () {\n        if (!this.ready()) {\n            throw new Error(\"Internal error: This SicFormat3 instruction is not ready.\");\n        }\n        var bytes = this.op.nixbpe();\n        bytes[0] |= (this.bc.opcode & 0xFC);\n        bytes[1] |= (this.op.val & 0x0F00) >>> 8;\n        bytes[2] = (this.op.val & 0xFF);\n        return bytes;\n    };\n    return SicFormat3;\n}());\nexports.SicFormat3 = SicFormat3;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode_1 = require(\"./SicBytecode\");\nvar SicOperandAddr_1 = require(\"./SicOperandAddr\");\nvar SicFormat4 = (function () {\n    function SicFormat4(line, csect) {\n        if (!SicFormat4.isFormat4(line.op)) {\n            throw new Error(line.op + \" is not format 4\");\n        }\n        this.bc = SicBytecode_1.bytecodeTable[line.op.slice(1)];\n        this.op = new SicOperandAddr_1.SicOperandAddr(line.args, SicOperandAddr_1.SicOpType.f4, csect);\n    }\n    SicFormat4.isFormat4 = function (mnemonic) {\n        if (mnemonic.charAt(0) !== \"+\") {\n            return false;\n        }\n        var bc = SicBytecode_1.bytecodeTable[mnemonic.slice(1)];\n        return bc !== undefined && bc.format === 3;\n    };\n    SicFormat4.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return this.op.makeReady(loc + this.length(), tagTab, litTab, extRefTab);\n    };\n    SicFormat4.prototype.ready = function () {\n        return this.op.ready();\n    };\n    SicFormat4.prototype.length = function () {\n        return 4;\n    };\n    SicFormat4.prototype.toBytes = function () {\n        if (!this.ready()) {\n            throw new Error(\"Internal error: This SicFormat4 instruction is not ready.\");\n        }\n        var bytes = this.op.nixbpe();\n        bytes[0] |= (this.bc.opcode & 0xFC);\n        bytes[1] |= (this.op.val & 0x0F0000) >>> 16;\n        bytes[2] = (this.op.val & 0xFF00) >>> 8;\n        bytes[3] = (this.op.val & 0xFF);\n        return bytes;\n    };\n    return SicFormat4;\n}());\nexports.SicFormat4 = SicFormat4;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicBytecode_1 = require(\"./SicBytecode\");\nvar SicOperandAddr_1 = require(\"./SicOperandAddr\");\nvar SicFormatLegacy = (function () {\n    function SicFormatLegacy(line, csect) {\n        if (!SicFormatLegacy.isFormatLegacy(line.op)) {\n            throw new Error(line.op + \" is not SIC legacy format\");\n        }\n        this.bc = SicBytecode_1.bytecodeTable[line.op.slice(1)];\n        this.op = new SicOperandAddr_1.SicOperandAddr(line.args, SicOperandAddr_1.SicOpType.legacy, csect);\n    }\n    SicFormatLegacy.isFormatLegacy = function (mnemonic) {\n        if (mnemonic.charAt(0) !== \"*\") {\n            return false;\n        }\n        var bc = SicBytecode_1.bytecodeTable[mnemonic.slice(1)];\n        return bc !== undefined && bc.format === 3;\n    };\n    SicFormatLegacy.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return this.op.makeReady(loc + this.length(), tagTab, litTab, extRefTab);\n    };\n    SicFormatLegacy.prototype.ready = function () {\n        return this.op.ready();\n    };\n    SicFormatLegacy.prototype.length = function () {\n        return 3;\n    };\n    SicFormatLegacy.prototype.toBytes = function () {\n        if (!this.ready()) {\n            throw new Error(\"Internal error: This SicFormatLegacy instruction is not ready.\");\n        }\n        var bytes = this.op.nixbpe();\n        bytes[0] |= (this.bc.opcode & 0xFC);\n        bytes[1] |= (this.op.val & 0x7F00) >>> 8;\n        bytes[2] = (this.op.val & 0xFF);\n        return bytes;\n    };\n    return SicFormatLegacy;\n}());\nexports.SicFormatLegacy = SicFormatLegacy;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicLitTab = (function () {\n    function SicLitTab() {\n        this.ltorgs = [];\n        this.pending = new Set();\n    }\n    SicLitTab.prototype.getLitLoc = function (n, pc) {\n        if (pc === void 0) { pc = 0; }\n        var diffMin = Number.MAX_SAFE_INTEGER;\n        var loc = null;\n        this.ltorgs.forEach(function (lt) {\n            if (lt.val === n && diffMin > Math.min(lt.loc - pc, lt.loc)) {\n                diffMin = Math.min(lt.loc - pc, lt.loc);\n                loc = lt.loc;\n            }\n        });\n        return loc;\n    };\n    SicLitTab.prototype.createOrg = function (loc) {\n        var l = loc;\n        var m = [];\n        var lt = this.pending.forEach(function (v) {\n            m.push({ loc: l, val: v });\n            l += 3;\n        });\n        this.ltorgs = this.ltorgs.concat(m);\n        this.pending = new Set();\n        return m;\n    };\n    SicLitTab.prototype.add = function (n) {\n        if (this.getLitLoc(n) === null) {\n            this.pending.add(n);\n        }\n    };\n    SicLitTab.prototype.hasPending = function (n) {\n        if (n === undefined) {\n            return this.pending.size > 0;\n        }\n        return this.pending.has(n);\n    };\n    return SicLitTab;\n}());\nexports.SicLitTab = SicLitTab;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicSpace_1 = require(\"./SicSpace\");\nvar SicLiteral = (function () {\n    function SicLiteral(val) {\n        this.val = val;\n    }\n    SicLiteral.prototype.length = function () {\n        return 3;\n    };\n    SicLiteral.prototype.ready = function () {\n        return true;\n    };\n    SicLiteral.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return null;\n    };\n    SicLiteral.prototype.toBytes = function () {\n        return SicSpace_1.SicSpace.splitWord(this.val);\n    };\n    return SicLiteral;\n}());\nexports.SicLiteral = SicLiteral;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicFmt_1 = require(\"./SicFmt\");\nvar SicLstEntry = (function () {\n    function SicLstEntry(source, bcData) {\n        this.source = source;\n        if (typeof bcData === \"string\") {\n            this.bcData = undefined;\n            this.errmsg = bcData;\n        }\n        else {\n            this.bcData = bcData;\n            this.errmsg = undefined;\n        }\n    }\n    SicLstEntry.prototype.hasInstruction = function () {\n        return this.bcData !== undefined && this.bcData.inst !== undefined;\n    };\n    SicLstEntry.prototype.byteCode = function () {\n        if (!(this.bcData !== undefined && this.bcData.inst !== undefined)) {\n            throw new Error(\"This SicLstEntry does not have an instruction in it\");\n        }\n        return this.bcData.inst.toBytes();\n    };\n    SicLstEntry.prototype.byteString = function () {\n        return SicFmt_1.bytesToString(this.byteCode());\n    };\n    return SicLstEntry;\n}());\nexports.SicLstEntry = SicLstEntry;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicPending_1 = require(\"./SicPending\");\nvar SicUnsigned_1 = require(\"./SicUnsigned\");\nvar SicOpAddrType;\n(function (SicOpAddrType) {\n    SicOpAddrType[SicOpAddrType[\"immediate\"] = 0] = \"immediate\";\n    SicOpAddrType[SicOpAddrType[\"direct\"] = 1] = \"direct\";\n    SicOpAddrType[SicOpAddrType[\"indirect\"] = 2] = \"indirect\";\n})(SicOpAddrType = exports.SicOpAddrType || (exports.SicOpAddrType = {}));\nvar SicOpType;\n(function (SicOpType) {\n    SicOpType[SicOpType[\"f3\"] = 0] = \"f3\";\n    SicOpType[SicOpType[\"f4\"] = 1] = \"f4\";\n    SicOpType[SicOpType[\"legacy\"] = 2] = \"legacy\";\n})(SicOpType = exports.SicOpType || (exports.SicOpType = {}));\nvar SicOperandAddr = (function () {\n    function SicOperandAddr(arg, type, csect) {\n        var reDecimal = new RegExp(\"^(=|#|@)?(-?\\\\d+)(,X)?$\");\n        var reHex = new RegExp(\"^(=|#|@)?X'([0-9A-F]+)'(,X)?$\");\n        var reChar = new RegExp(\"^(=|#|@)?C'(.{1,3})'(,X)?$\");\n        var reTag = new RegExp(\"^(#|@)?([A-Z0-9]+)(,X)?$\");\n        var getType = function (char) {\n            switch (char) {\n                case \"#\":\n                    return SicOpAddrType.immediate;\n                case \"@\":\n                    return SicOpAddrType.indirect;\n                case \"=\":\n                default:\n                    return SicOpAddrType.direct;\n            }\n        };\n        var isLiteral = function (c) { return c !== undefined && c.charAt(0) === \"=\"; };\n        this.type = type;\n        this.base = this.type === SicOpType.f3 ? csect.base : undefined;\n        this.pcrel = this.type === SicOpType.f3;\n        var match;\n        if ((match = arg.match(reDecimal)) !== null) {\n            var x = parseInt(match[2], 10);\n            if (isLiteral(match[1])) {\n                csect.litTab.add(x);\n                this.val = new SicPending_1.SicPending(x);\n            }\n            else {\n                this.val = x;\n                this.pcrel = false;\n                this.base = undefined;\n            }\n        }\n        else if ((match = arg.match(reHex)) !== null) {\n            var x = parseInt(match[2], 16);\n            if (isLiteral(match[1])) {\n                csect.litTab.add(x);\n                this.val = new SicPending_1.SicPending(x);\n            }\n            else {\n                this.val = x;\n                this.pcrel = false;\n                this.base = undefined;\n            }\n        }\n        else if ((match = arg.match(reChar)) !== null) {\n            var bytes = [];\n            for (var i = 0; i < match[2].length; ++i) {\n                bytes.push(match[2].charCodeAt(i));\n            }\n            while (bytes.length < 3) {\n                bytes = [0].concat(bytes);\n            }\n            var x = (bytes[0] << 16) + (bytes[1] << 8) + (bytes[2]);\n            if (isLiteral(match[1])) {\n                csect.litTab.add(x);\n                this.val = new SicPending_1.SicPending(x);\n            }\n            else {\n                this.val = x;\n                this.pcrel = false;\n                this.base = undefined;\n            }\n        }\n        else if ((match = arg.match(reTag)) != null) {\n            if (csect.extRefTab.has(match[2])) {\n                if (this.type !== SicOpType.f4) {\n                    throw new Error(\"EXTREF symbols can only be used with format 4\");\n                }\n                csect.modRecs.push({ loc: csect.useTab.aloc, len: 5, symbol: match[2] });\n                this.val = 0;\n                this.pcrel = false;\n            }\n            else {\n                this.val = new SicPending_1.SicPending(match[2]);\n            }\n        }\n        else if (arg.trim() === \"\") {\n            this.val = 0;\n            this.pcrel = false;\n            this.base = undefined;\n            this.addr = SicOpAddrType.direct;\n            this.indexed = false;\n            this.rdy = true;\n            return;\n        }\n        else {\n            throw new Error(\"Operand \" + arg + \" is not of any valid format.\");\n        }\n        this.addr = getType(match[1]);\n        this.indexed = match[3] != null;\n        if (this.addr !== SicOpAddrType.direct && this.type === SicOpType.legacy) {\n            throw new Error(\"SIC Legacy instructions can only use direct addressing\");\n        }\n        this.rdy = !this.pcrel &&\n            this.base === undefined &&\n            typeof this.val === \"number\";\n    }\n    SicOperandAddr.prototype.ready = function () {\n        return this.rdy;\n    };\n    SicOperandAddr.prototype.makeReady = function (pc, tagTab, litTab, extRefTab) {\n        if (this.rdy) {\n            return null;\n        }\n        if (this.base !== undefined && !this.base.ready()) {\n            this.base.makeReady(tagTab);\n        }\n        if (typeof this.val !== \"number\") {\n            var q = this.val.convert(tagTab, litTab, extRefTab);\n            if (typeof q === \"string\") {\n                this.val = 0;\n                if (this.type !== SicOpType.f4) {\n                    throw new Error(\"EXTREF'd symbols can only be used with pass 2\");\n                }\n                return q;\n            }\n            this.val = q;\n        }\n        var opLen;\n        switch (this.type) {\n            case SicOpType.f3:\n                opLen = 12;\n                break;\n            case SicOpType.legacy:\n                opLen = 15;\n                break;\n            case SicOpType.f4:\n                opLen = 20;\n                break;\n            default:\n                throw new Error(\"type is not valid\");\n        }\n        if (this.pcrel) {\n            try {\n                this.val = SicUnsigned_1.sicMakeUnsigned(this.val - pc, opLen);\n                this.rdy = true;\n                return null;\n            }\n            catch (e) {\n                this.pcrel = false;\n            }\n        }\n        if (this.base) {\n            try {\n                this.val = SicUnsigned_1.sicMakeUnsigned(this.val - this.base.val, opLen);\n                this.rdy = true;\n                return null;\n            }\n            catch (e) {\n                this.base = undefined;\n            }\n        }\n        SicUnsigned_1.sicCheckUnsigned(this.val, opLen);\n        this.rdy = true;\n        return null;\n    };\n    SicOperandAddr.prototype.nixbpe = function () {\n        if (!this.ready()) {\n            throw new Error(\"nixbpe() can only be called when the value is ready.\");\n        }\n        var n;\n        var i;\n        var x = this.indexed;\n        var b = !this.pcrel && this.base !== undefined;\n        var p = this.pcrel;\n        var e = this.type === SicOpType.f4;\n        switch (this.addr) {\n            case SicOpAddrType.direct:\n                if (this.type === SicOpType.legacy) {\n                    n = false;\n                    i = false;\n                }\n                else {\n                    n = true;\n                    i = true;\n                }\n                break;\n            case SicOpAddrType.indirect:\n                n = true;\n                i = false;\n                break;\n            case SicOpAddrType.immediate:\n                n = false;\n                i = true;\n                break;\n            default:\n                throw new Error(\"Registers do not have an nixbpe value\");\n        }\n        var bytes = [0x0, 0x0];\n        if (n) {\n            bytes[0] |= 0x2;\n        }\n        if (i) {\n            bytes[0] |= 0x1;\n        }\n        if (x) {\n            bytes[1] |= 0x80;\n        }\n        if (b) {\n            bytes[1] |= 0x40;\n        }\n        if (p) {\n            bytes[1] |= 0x20;\n        }\n        if (e) {\n            bytes[1] |= 0x10;\n        }\n        return bytes;\n    };\n    return SicOperandAddr;\n}());\nexports.SicOperandAddr = SicOperandAddr;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicPending = (function () {\n    function SicPending(val) {\n        this.val = val;\n    }\n    SicPending.prototype.isLiteral = function () {\n        return typeof this.val === \"number\";\n    };\n    SicPending.prototype.isTag = function () {\n        return typeof this.val === \"string\";\n    };\n    SicPending.prototype.convert = function (tagTab, litTab, extRefTab) {\n        var s;\n        if (typeof this.val === \"number\") {\n            if (litTab === null) {\n                throw new Error(\"litTab is undefined but this SicPending is a literal\");\n            }\n            s = litTab.getLitLoc(this.val);\n            if (s === null) {\n                throw new Error(this.val + \"was not found in the literal table\");\n            }\n            return s;\n        }\n        if (extRefTab !== null && extRefTab.has(this.val)) {\n            return this.val;\n        }\n        if (tagTab === null) {\n            throw new Error(\"tagTab is undefined but this SicPending is a tag\");\n        }\n        s = tagTab[this.val];\n        if (s === null) {\n            throw new Error(this.val + \"was not found in the tag table\");\n        }\n        return s;\n    };\n    return SicPending;\n}());\nexports.SicPending = SicPending;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sicRegToDec = function (reg) {\n    switch (reg) {\n        case \"A\":\n            return 0;\n        case \"X\":\n            return 1;\n        case \"L\":\n            return 2;\n        case \"B\":\n            return 3;\n        case \"S\":\n            return 4;\n        case \"T\":\n            return 5;\n        case \"F\":\n            return 6;\n        case \"PC\":\n            return 8;\n        case \"SW\":\n            return 9;\n        default:\n            throw new Error(\"reg type \" + reg + \" is not valid\");\n    }\n};\nexports.sicDecToReg = function (reg) {\n    switch (reg) {\n        case 0:\n            return \"A\";\n        case 1:\n            return \"X\";\n        case 2:\n            return \"L\";\n        case 3:\n            return \"B\";\n        case 4:\n            return \"S\";\n        case 5:\n            return \"T\";\n        case 6:\n            return \"F\";\n        case 8:\n            return \"PC\";\n        case 9:\n            return \"SW\";\n        default:\n            throw new Error(\"reg no \" + reg + \" is not valid\");\n    }\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicUnsigned_1 = require(\"./SicUnsigned\");\nvar SicSpace = (function () {\n    function SicSpace(line) {\n        if (!SicSpace.isSpace(line.op)) {\n            throw new Error(\"This mnemonic is not a space.\");\n        }\n        this.mnemonic = line.op;\n        var func = this.mnemonic === \"BYTE\" ? SicSpace.splitByte : SicSpace.splitWord;\n        var reDec = new RegExp(\"^(-?\\\\d+)$\");\n        var reHex = new RegExp(\"^X'([0-9A-Fa-f]+)'$\");\n        var reChar = new RegExp(\"^C'(.+)'$\");\n        var match;\n        if ((match = line.args.match(reDec)) !== null) {\n            this.arg = func(parseInt(match[1], 10));\n        }\n        else if ((match = line.args.match(reHex)) !== null) {\n            this.arg = func(parseInt(match[1], 16));\n        }\n        else if ((match = line.args.match(reChar)) !== null) {\n            this.arg = [];\n            for (var i = 0; i < match[1].length; ++i) {\n                this.arg.push(match[1].charCodeAt(i));\n            }\n        }\n        else {\n            throw new Error(line.args + \" is not a valid operand format.\");\n        }\n    }\n    SicSpace.isSpace = function (mnemonic) {\n        var re = new RegExp(\"^(WORD|BYTE)$\");\n        return re.test(mnemonic);\n    };\n    SicSpace.splitWord = function (n) {\n        if (n >= 0) {\n            SicUnsigned_1.sicCheckUnsigned(n, 24);\n        }\n        else {\n            n = SicUnsigned_1.sicMakeUnsigned(n, 24);\n        }\n        return [(n & 0xFF0000) >>> 16, (n & 0xFF00) >>> 8, (n & 0xFF)];\n    };\n    SicSpace.splitByte = function (n) {\n        if (n >= 0) {\n            SicUnsigned_1.sicCheckUnsigned(n, 8);\n        }\n        else {\n            n = SicUnsigned_1.sicMakeUnsigned(n, 8);\n        }\n        return [0, 0, n];\n    };\n    SicSpace.prototype.ready = function () {\n        return true;\n    };\n    SicSpace.prototype.makeReady = function (loc, tagTab, litTab, extRefTab) {\n        return null;\n    };\n    SicSpace.prototype.length = function () {\n        switch (this.mnemonic) {\n            case \"WORD\":\n                return this.arg.length + (this.arg.length % 3 !== 0 ? 1 : 0);\n            case \"BYTE\":\n                return this.arg.length;\n            default:\n                throw new Error(this.mnemonic + \" is invalid. this is a ultra mega bug\");\n        }\n    };\n    SicSpace.prototype.toBytes = function () {\n        var a = [];\n        switch (this.mnemonic) {\n            case \"WORD\":\n                for (var i = 0; i < this.arg.length % 3; ++i) {\n                    a.push(0x00);\n                }\n                this.arg.forEach(function (val) { return a.push(val); });\n                return a;\n            case \"BYTE\":\n                return this.arg;\n            default:\n                throw new Error(\"Mnemonic is invalid.\");\n        }\n    };\n    return SicSpace;\n}());\nexports.SicSpace = SicSpace;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicSplit = (function () {\n    function SicSplit(line) {\n        line = line.replace(/\\..*$/, \"\").toUpperCase();\n        var lineArr = line.split(/\\s+/);\n        if (lineArr.length <= 1) {\n            throw new Error(\"This line does not have the correct number of entries. Did you forget to put whitespace before the operand?\");\n        }\n        this.tag = lineArr[0];\n        this.op = lineArr[1];\n        if (lineArr.length >= 3) {\n            this.args = lineArr.slice(2).reduce(function (acc, val) { return acc + val; }, \"\");\n        }\n        else {\n            this.args = \"\";\n        }\n        if (this.tag !== \"\" && this.tag.match(/^[A-Z][A-Z0-9]*$/) === null) {\n            throw new Error(\"Labels must start with A-Z (found \\\"\" + this.tag + \"\\\")\");\n        }\n    }\n    return SicSplit;\n}());\nexports.SicSplit = SicSplit;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicFmt_1 = require(\"./SicFmt\");\nexports.sicMakeMask = function (nBits) {\n    var m = 0x0;\n    for (var i = 0; i < nBits; ++i) {\n        m |= (1 << i);\n    }\n    return m;\n};\nexports.sicCheckUnsigned = function (val, nBits) {\n    if (val < 0x0 || val > exports.sicMakeMask(nBits)) {\n        throw new Error(SicFmt_1.asHex(val) + \" does not fit in an unsigned \" + nBits + \"-bit range\");\n    }\n};\nexports.sicMakeUnsigned = function (val, nBits) {\n    var m = exports.sicMakeMask(nBits - 1);\n    if (val < -m - 1 || val > m) {\n        throw new Error(SicFmt_1.asHex(val) + \" does not fit in a signed \" + nBits + \"-bit range\");\n    }\n    val >>>= 0;\n    val &= exports.sicMakeMask(nBits);\n    return val;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SicUseTab = (function () {\n    function SicUseTab(startloc) {\n        this.ALOC = this.RLOC = this.startloc = startloc;\n        this.useTab = {};\n        this.currentUse = \"\";\n    }\n    Object.defineProperty(SicUseTab.prototype, \"aloc\", {\n        get: function () {\n            return this.ALOC;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SicUseTab.prototype, \"rloc\", {\n        get: function () {\n            return this.RLOC;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SicUseTab.prototype.inc = function (n) {\n        this.RLOC += n;\n        this.ALOC += n;\n    };\n    SicUseTab.prototype.use = function (label) {\n        this.useTab[this.currentUse] = this.RLOC;\n        this.currentUse = label;\n        var x = this.useTab[label];\n        if (x === undefined) {\n            x = this.startloc;\n        }\n        this.RLOC = x;\n    };\n    return SicUseTab;\n}());\nexports.SicUseTab = SicUseTab;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"jquery\");\nvar SicCompiler_1 = __importDefault(require(\"./SicCompiler/SicCompiler\"));\nvar editor = ace.edit(\"editor\");\neditor.setTheme(\"ace/theme/monokai\");\neditor.session.setMode(\"ace/mode/sicxe\");\n$(\"#output\").val(\"\");\nvar textToArray = function (innerText) {\n    return innerText.split(\"\\n\");\n};\nvar arrayToText = function (array) {\n    return array.reduce(function (acc, val) { return acc + \"\\n\" + val; });\n};\n$(\"#btnCompile\").click(function () {\n    try {\n        var arr = textToArray(editor.getValue());\n        var comp = new SicCompiler_1.default(arr);\n        var output = [\"-----lst-----\"];\n        output = output.concat(comp.makeLst());\n        if (!comp.err) {\n            output = output.concat(\"\", \"\", \"-----obj-----\");\n            output = output.concat(comp.makeObj());\n        }\n        else {\n            output = output.concat(\"\", \"\", \"No obj generation due to errors in lst.\");\n        }\n        $(\"#output\").val(arrayToText(output));\n    }\n    catch (e) {\n        alert(e.message);\n    }\n});"]}